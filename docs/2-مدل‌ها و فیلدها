
## بخش 2: مدل‌ها و فیلدها

در این بخش به بررسی ساختار و ویژگی‌های مدل‌ها در جنگو می‌پردازیم. مدل‌ها در جنگو نمایانگر جداول پایگاه داده هستند و می‌توانند فیلدهایی از انواع مختلف (عدد، متن، تاریخ و ...) داشته باشند. همچنین، از طریق تنظیمات مدل‌ها و فیلدها می‌توان ویژگی‌های مختلف را پیکربندی کرد.

---

### 2.1. تعریف مدل‌ها و متادیتا (Meta)

در جنگو، مدل‌ها به صورت کلاس‌های Python تعریف می‌شوند که از `models.Model` ارث‌بری می‌کنند. این کلاس‌ها نمایانگر جداول پایگاه داده هستند و هر ویژگی مدل (هر فیلد) معادل یک ستون در جدول پایگاه داده است.

#### 2.1.1. مثال ساده مدل در جنگو:

```python
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name
```

## در این مثال:

name از نوع CharField است که برای ذخیره رشته‌ها استفاده می‌شود.
price از نوع DecimalField برای ذخیره قیمت‌ها به همراه تعداد رقم‌های اعشاری است.
created_at از نوع DateTimeField است که زمان ایجاد شیء را ذخیره می‌کند.
2.1.2. متادیتا (Meta)
در هر مدل جنگو، می‌توانیم کلاس Meta را برای تنظیمات اضافی مانند نام جدول، ترتیب پیش‌فرض و غیره استفاده کنیم.

```python
class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    
    class Meta:
        db_table = 'product_table'  # نام جدول پایگاه داده را تغییر می‌دهیم
        ordering = ['price']  # ترتیب پیش‌فرض براساس قیمت

```

### توضیحات:

- **`db_table`**: نام جدول پایگاه داده را مشخص می‌کند. در این مثال، نام جدول `product_table` است.
- **`ordering`**: ترتیب پیش‌فرض برای نمایش داده‌ها را بر اساس فیلد `price` تعیین می‌کند. یعنی محصولات به ترتیب قیمت نمایش داده خواهند شد.

---

### 2.2. انواع فیلدها

جنگو انواع مختلفی از فیلدها را برای ذخیره‌سازی داده‌ها به کار می‌برد. این فیلدها می‌توانند شامل انواع مختلف داده‌ها مانند رشته‌ها، اعداد، تاریخ‌ها و غیره باشند.
## 2.2.1. فیلدهای متنی

- **`CharField`**: برای ذخیره رشته‌های کوتاه، مانند نام‌ها یا عنوان‌ها.
  - **ارگومان اصلی**: `max_length` (حداکثر طول رشته)
  - **مثال**:
  ```
  name = models.CharField(max_length=255)
  ```

- **`TextField`**: برای ذخیره متن طولانی‌تر مانند توضیحات.
  - **ارگومان اصلی**: `blank` (آیا این فیلد می‌تواند خالی باشد یا نه)
  - **مثال**:
  ```
  description = models.TextField(blank=True)
  ```

- **`SlugField`**: برای ذخیره اسلاگ‌ها که معمولاً در URL استفاده می‌شوند.
  - **ارگومان‌های اصلی**: `unique` (آیا این اسلاگ باید یکتا باشد؟)
  - **مثال**:
  ```
  slug = models.SlugField(unique=True)
  ```

---

## 2.2.2. فیلدهای عددی

- **`IntegerField`**: برای ذخیره اعداد صحیح.
  - **مثال**:
  ```
  quantity = models.IntegerField()
  ```

- **`DecimalField`**: برای ذخیره اعداد با دقت بالا (برای مقادیر پول یا اعداد علمی).
  - **ارگومان‌های اصلی**: 
    - `max_digits` (تعداد ارقام کل)
    - `decimal_places` (تعداد ارقام اعشاری)
  - **مثال**:
  ```
  price = models.DecimalField(max_digits=10, decimal_places=2)
  ```

- **`FloatField`**: برای ذخیره اعداد اعشاری (با دقت کمتر از `DecimalField`).
  - **مثال**:
  ```
  rating = models.FloatField()
  ```

---

## 2.2.3. فیلدهای تاریخ و زمان

- **`DateField`**: برای ذخیره تاریخ‌ها.
  - **ارگومان‌های اصلی**:
    - `auto_now` (برای تنظیم خودکار تاریخ فعلی)
    - `auto_now_add` (برای تنظیم تاریخ فعلی هنگام ایجاد شیء)
  - **مثال**:
  ```
  published_on = models.DateField(auto_now_add=True)
  ```

- **`DateTimeField`**: برای ذخیره تاریخ و زمان.
  - **مثال**:
  ```
  updated_at = models.DateTimeField(auto_now=True)
  ```

- **`DurationField`**: برای ذخیره مدت‌زمان‌ها.
  - **مثال**:
  ```
  duration = models.DurationField()
  ```

---

## 2.2.4. فیلدهای باینری و فایل‌ها

- **`BinaryField`**: برای ذخیره داده‌های باینری.
  - **مثال**:
  ```
  image_data = models.BinaryField()
  ```

- **`FileField`**: برای ذخیره فایل‌ها.
  - **ارگومان اصلی**: `upload_to` (مسیر ذخیره‌سازی فایل)
  - **مثال**:
  ```
  file = models.FileField(upload_to='documents/')
  ```

- **`ImageField`**: برای ذخیره تصاویر (که یک نوع خاص از `FileField` است).
  - **ارگومان اصلی**: `upload_to` (مسیر ذخیره‌سازی تصویر)
  - **مثال**:
  ```
  image = models.ImageField(upload_to='images/')
  ```

---

## 2.2.5. فیلدهای پیشرفته

- **`JSONField`**: برای ذخیره داده‌های JSON (بیشتر در نسخه‌های جدید جنگو).
  - **مثال**:
  ```
  metadata = models.JSONField()
  ```

- **`UUIDField`**: برای ذخیره شناسه‌های یکتا (UUID).
  - **مثال**:
  ```
  uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
  ```

- **`IPAddressField`**: برای ذخیره آدرس‌های IP.
  - **مثال**:
  ```
  ip_address = models.IPAddressField()
  ```
## 2.3. ویژگی‌های فیلدها

فیلدهای مدل‌ها می‌توانند ویژگی‌های مختلفی داشته باشند که رفتار آن‌ها را تغییر دهند. در اینجا به برخی از ویژگی‌های رایج فیلدها می‌پردازیم:

### 2.3.1. ویژگی‌های مهم فیلدها

- **`null`**: مشخص می‌کند که آیا مقدار این فیلد می‌تواند `NULL` باشد (در پایگاه داده).
- **`blank`**: مشخص می‌کند که آیا این فیلد می‌تواند خالی باشد (در فرم‌ها).
- **`default`**: مقدار پیش‌فرض فیلد در صورت عدم ارائه مقدار.
- **`unique`**: مشخص می‌کند که مقدار این فیلد باید یکتا باشد.
- **`choices`**: برای محدود کردن انتخاب‌های یک فیلد به یک مجموعه خاص از مقادیر.

---

### 2.3.2. مثال فیلد با ویژگی‌ها

```python
class Product(models.Model):
    name = models.CharField(max_length=100, unique=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.0)
    category = models.CharField(max_length=50, choices=[
        ('electronics', 'Electronics'),
        ('furniture', 'Furniture'),
        ('clothing', 'Clothing')
    ])
    is_active = models.BooleanField(default=True)
```

در اینجا:

- **`name`** باید یکتا باشد.
- **`price`** مقدار پیش‌فرض دارد.
- **`category`** تنها می‌تواند یکی از گزینه‌های موجود را داشته باشد.
- **`is_active`** مقدار پیش‌فرض دارد که `True` است.

---

## 2.4. فیلدهای سفارشی (Custom Fields)

گاهی اوقات نیاز دارید که فیلدی خاص و سفارشی ایجاد کنید که نیازمند منطق خاصی است. این کار با ایجاد کلاس‌های سفارشی برای فیلدهای مدل انجام می‌شود.

### 2.4.1. مثال فیلد سفارشی

```python
from django.db import models

class UppercaseCharField(models.CharField):
    def get_prep_value(self, value):
        return value.upper() if value else value

class Product(models.Model):
    name = UppercaseCharField(max_length=100)
```

در اینجا:

- فیلدی به نام **`UppercaseCharField`** ساخته‌ایم که به طور خودکار مقدار واردشده را به حروف بزرگ تبدیل می‌کند.
